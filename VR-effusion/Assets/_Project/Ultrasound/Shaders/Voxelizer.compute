#pragma kernel InitCull
#pragma kernel MainCull
#pragma kernel MainRaster
#pragma kernel Fill
#pragma kernel Clear
#pragma kernel Render

#define USE_POSITIONS
//#define USE_NORMALS
//#define USE_TANGENTS

#define TRANSFORM_POSITIONS
//#define TRANSFORM_NORMALS
//#define TRANSFORM_TANGENTS

#define min3(a, b, c   ) min(min(a, b),         c)
#define min4(a, b, c, d) min(min(a, b), min(c, d))
#define max3(a, b, c   ) max(max(a, b),         c)
#define max4(a, b, c, d) max(max(a, b), max(c, d))

// ---- Type definitions ----

struct VoxelMask {
    int back;
    int fill;
};

struct Voxel {
    float density;
    float attenuation;
};

uint INDEX_STRIDE = 4;
uint VERTEX_STRIDE = 12 + 12 + 16;
struct Vertex {
    float3 pos;
    float3 nor;
    float4 tan;
};

struct OutVertex {
    float3 pos;
    float3 col;
};

static const uint TRIANGLE_STRIDE = 4 + 12 + 12 + 12;
struct Triangle {
    float3 v0;
    float3 v1;
    float3 v2;
    int layer;

    bool back() {
        return cross(v1 - v0, v2 - v0).z >= 0.0;
    }

    static bool intersectOntoAxis(float3 f0, float3 f1, float3 f2, float3 extents, float3 axis) {
        float d0 = dot(f0, axis);
        float d1 = dot(f1, axis);
        float d2 = dot(f2, axis);
        float r = dot(extents, abs(axis));
        float minD = min3(d0, d1, d2);
        float maxD = max3(d0, d1, d2);
        return !((maxD < -r) || (r < minD));
    }

    bool instersectAABB(float3 center, float3 extents) {
        float3 p0 = v0 - center;
        float3 p1 = v1 - center;
        float3 p2 = v2 - center;

        float3 p01 = p1 - p0;
        float3 p12 = p2 - p1;
        float3 p20 = p0 - p2;

        if (!intersectOntoAxis(p0, p1, p2, extents, float3(0, -p01.z, p01.y)))
            return false;
        if (!intersectOntoAxis(p0, p1, p2, extents, float3(0, -p12.z, p12.y)))
            return false;
        if (!intersectOntoAxis(p0, p1, p2, extents, float3(0, -p20.z, p20.y)))
            return false;
        if (!intersectOntoAxis(p0, p1, p2, extents, float3(p01.z, 0, -p01.x)))
            return false;
        if (!intersectOntoAxis(p0, p1, p2, extents, float3(p12.z, 0, -p12.x)))
            return false;
        if (!intersectOntoAxis(p0, p1, p2, extents, float3(p20.z, 0, -p20.x)))
            return false;
        if (!intersectOntoAxis(p0, p1, p2, extents, float3(-p01.y, p01.x, 0)))
            return false;
        if (!intersectOntoAxis(p0, p1, p2, extents, float3(-p12.y, p12.x, 0)))
            return false;
        if (!intersectOntoAxis(p0, p1, p2, extents, float3(-p20.y, p20.x, 0)))
            return false;

        if (any(max3(p0, p1, p2) < -extents || min3(p0, p1, p2) > extents))
            return false;

        float3 nor = cross(p12, p01);
        float d = dot(nor, v0);
        float r = dot(extents, abs(nor));
        float s = dot(nor, center) - d;

        return abs(s) <= r;
    }
};

struct TriangleIntersect {
    float3 v0;
    float3 v10;
    float3 v20;
    float3 nor;
    float d;
    bool back;

    void init(Triangle tri) {
        v0 = tri.v0;
        v10 = tri.v1 - tri.v0;
        v20 = tri.v2 - tri.v0;

        nor = cross(v10, v20);
        //nor = tri.nor;
        back = nor.z >= 0.0;
        nor = back ? -nor : nor;
        d = 1.0 / -nor.z;
    }

    bool intersect(float3 p, out float t, out float2 uv) {
        float3 r = p - v0;
        float3 q = cross(r, float3(0, 0, 1));

        uv.x = d * dot(-q, v20);
        uv.y = d * dot(+q, v10);
        t    = d * dot(+r, nor);
        return uv.x < 0.0 || uv.y < 0.0 || (uv.x + uv.y) <= 1.0;
    }
};

#define toIndex(x, y, z) (z * HEIGHT + y) * WIDTH + x
#define toScreenSpace(pos) (pos * 0.5 + 0.5) * float3(WIDTH, HEIGHT, DEPTH)

// ---- Attributes ----

int WIDTH;
int HEIGHT;
int DEPTH;

int MAX_TRIANGLE_COUNT;

uint _inStart;
uint _inCount;

int _inLayer;
float _inDensity;
float _inAttenuation;

float4x4 _matrix;

// ---- Input and Output ---

Buffer _profilerFlag;

ByteAddressBuffer _inVertices;
ByteAddressBuffer _inIndices;

RWByteAddressBuffer _varTriangles;
RWStructuredBuffer<int> _varPointers;

RWStructuredBuffer<VoxelMask> _outVoxelMasks;
RWStructuredBuffer<Voxel> _outVoxels;

RWStructuredBuffer<OutVertex> _outVertices;

uint3 readInTriangleIndices(uint t) {
    if (INDEX_STRIDE == 2) {
        bool m = t & 1u == 1;
        t = (t & 0xfffffffeu) << 1;
        uint b0 = _inIndices.Load(t + 0);
        uint b4 = _inIndices.Load(t + 4);
        uint3 i;
        i.x = (m ? b0 >> 16 : b0) & 0xffffu;
        i.y = (m ? b4 : b0 >> 16) & 0xffffu;
        i.z = (m ? b4 >> 16 : b4) & 0xffffu;
        return i;
    } else {
        uint3 i = _inIndices.Load3(t << 2u);
        return i;
    }
}

Vertex readInVertex(uint i) {
    Vertex v;
#ifdef USE_POSITIONS
    v.pos = asfloat(_inVertices.Load3(i * VERTEX_STRIDE +  0));
#else
    v.pos = 0.0;
#endif
#ifdef USE_NORMALS
    v.nor = asfloat(_inVertices.Load3(i * VERTEX_STRIDE + 12));
#else
    v.nor = 0.0;
#endif
#ifdef USE_TANGENTS
    v.tan = asfloat(_inVertices.Load3(i * VERTEX_STRIDE + 24));
#else
    v.tan = 0.0;
#endif
    return v;
}

void readInTriangle(uint t, out Vertex v0, out Vertex v1, out Vertex v2) {
    uint3 i = readInTriangleIndices(t);
    v0 = readInVertex(i.x);
    v1 = readInVertex(i.y);
    v2 = readInVertex(i.z);

    // Transform (local -> world -> view -> clip)
    #ifdef TRANSFORM_POSITIONS
    v0.pos.xyz = mul(_matrix, float4(v0.pos.xyz, 1.0)).xyz;
    v1.pos.xyz = mul(_matrix, float4(v1.pos.xyz, 1.0)).xyz;
    v2.pos.xyz = mul(_matrix, float4(v2.pos.xyz, 1.0)).xyz;
    #endif

    #ifdef TRANSFORM_NORMALS
    v0.nor.xyz = mul(_matrix, float4(v0.nor.xyz, 0.0)).xyz;
    v1.nor.xyz = mul(_matrix, float4(v1.nor.xyz, 0.0)).xyz;
    v2.nor.xyz = mul(_matrix, float4(v2.nor.xyz, 0.0)).xyz;
    #endif

    #ifdef TRANSFORM_TANGENTS
    v0.tan.xyz = mul(_matrix, float4(v0.tan.xyz, 0.0)).xyz;
    v1.tan.xyz = mul(_matrix, float4(v1.tan.xyz, 0.0)).xyz;
    v2.tan.xyz = mul(_matrix, float4(v2.tan.xyz, 0.0)).xyz;
    #endif
}

void readVarTriangle(uint t, out Triangle tri) {
    t *= TRIANGLE_STRIDE;
    tri.v0 = asfloat(_varTriangles.Load3(t     ));
    tri.v1 = asfloat(_varTriangles.Load3(t + 12));
    tri.v2 = asfloat(_varTriangles.Load3(t + 24));
    tri.layer = asint(_varTriangles.Load(t + 36));
}

void writeVarTriangle(uint t, Triangle tri) {
    t *= TRIANGLE_STRIDE;
    _varTriangles.Store3(t     , asuint(tri.v0));
    _varTriangles.Store3(t + 12, asuint(tri.v1));
    _varTriangles.Store3(t + 24, asuint(tri.v2));
    _varTriangles.Store (t + 36, asuint(tri.layer));
}
#define _front _varPointers[0]
#define _back _varPointers[1]

bool popVarTriangle(out Triangle tri) {
    int t;
    InterlockedAdd(_front, 1, t);
    if (_front >= _back) {
        tri.layer = -1;
        tri.v0 = 0.0;
        tri.v1 = 0.0;
        tri.v2 = 0.0;
        return false;
    }
    readVarTriangle(uint(t), tri);
    return true;
}

bool pushVarTriangle(Triangle tri) {
    int t;
    InterlockedAdd(_back, 1, t);
    if (t >= MAX_TRIANGLE_COUNT)
        return false;
    writeVarTriangle(uint(t), tri);
    return true;
}

// ---- Cull ----

bool inView(Vertex v0, Vertex v1, Vertex v2) {
    int minX = min3(v0.pos.x, v1.pos.x, v2.pos.x);
    int maxX = max3(v0.pos.x, v1.pos.x, v2.pos.x);
    if (maxX <= -1.0 || 1.0 <= minX)
        return false;

    int minY = min3(v0.pos.y, v1.pos.y, v2.pos.y);
    int maxY = max3(v0.pos.y, v1.pos.y, v2.pos.y);
    if (maxY <= -1.0 || 1.0 <= minY)
        return false;

    int minZ = min3(v0.pos.z, v1.pos.z, v2.pos.z);
    int maxZ = max3(v0.pos.z, v1.pos.z, v2.pos.z);
    if (maxZ <= -2.0 || 2.0 <= minZ)
        return false;

    return true;
}

#define GROUP_SIZE 32
[numthreads(GROUP_SIZE,1,1)]
void InitCull(uint3 id : SV_DispatchThreadID) {
    //Triangle tri;
    //tri.layer = -1;
    //tri.v0 = -1.0;
    //tri.v1 = -1.0;
    //tri.v2 = -1.0;
    //for (int c = id.x; c < MAX_TRIANGLE_COUNT; c += GROUP_SIZE) {
    //    writeVarTriangle(c, tri);
    //}
    if (id.x == 0) {
        _back = 0;
        _front = 0;
    }
}

#define MAIN_CULL_SIZE 32
[numthreads(MAIN_CULL_SIZE,1,1)]
void MainCull(uint3 id : SV_DispatchThreadID) {
    uint count = _inCount / 3;
    [loop] for (uint t = id.x; t < count; t += MAIN_CULL_SIZE) {
        Vertex v0, v1, v2;
        readInTriangle(t * 3 + _inStart, v0, v1, v2);

        if (!inView(v0, v1, v2))
            continue;

        Triangle tri;
        tri.v0 = v0.pos;
        tri.v1 = v1.pos;
        tri.v2 = v2.pos;
        tri.layer = _inLayer;

        if (!pushVarTriangle(tri))
            break;
    }
}

void surface(Triangle tri) {
    tri.v0 = toScreenSpace(tri.v0);
    tri.v1 = toScreenSpace(tri.v1);
    tri.v2 = toScreenSpace(tri.v2);

    int3 start = max(min3(tri.v0, tri.v1, tri.v2), 0);
    int3 end = min(max3(tri.v0, tri.v1, tri.v2), int3(WIDTH, HEIGHT, DEPTH) - 1);

    TriangleIntersect meta;
    meta.init(tri);

    int mask = 1 << tri.layer;

    for (int z = start.z; z <= end.z; z++) {
        for (int y = start.y; y <= end.y; y++) {
            for (int x = start.x; x <= end.x; x++) {
                float3 center = float3(x, y, z) + 0.5;
                float3 extents = 0.25;

                if (tri.instersectAABB(center, extents)) {
                    int index = toIndex(x, y, z);
                    InterlockedOr(_outVoxelMasks[index].fill, mask);
                    if (tri.back())
                        InterlockedOr(_outVoxelMasks[index].back, mask);
                }


//                float t;
//                float2 uv;
//
//                if (!meta.intersect(float3(x + 0.5, y + 0.5, 0), t, uv))
//                    continue;
//
//                //if(t >= DEPTH)
//                //    continue;
//
//                int z = clamp(int(t), 0, DEPTH - 1);
//                int index = toIndex(x, y, z);
//
//                int mask = 1 << tri.layer;
//
//                InterlockedOr(_outVoxelMasks[index].fill, mask);
//                if (meta.back)
//                    InterlockedOr(_outVoxelMasks[index].back, mask);
            }
        }
    }
}

#define MAIN_RASTER_SIZE 32
[numthreads(MAIN_RASTER_SIZE,1,1)]
void MainRaster(uint3 id : SV_DispatchThreadID) {
    for (int t = id.x; t < MAX_TRIANGLE_COUNT; t += MAIN_RASTER_SIZE) {
        Triangle tri;
        if (!popVarTriangle(tri))
            return;
        if (tri.layer < 0)
            return;
        surface(tri);
    }
}

// ---- Fill ----

static const Voxel AIR = {0.0, 1.0};

static Voxel _data[32];
static struct Cache {
    int _index;
    int _mask;

    Voxel first() {
        if (_index < 0)
            return AIR;

        return _data[_index];
    }

    static int MSB(uint mask) {
        if (mask == 0)
            return -1;

        int index = 0;
        while ((mask >>= 1) > 0)
            index++;

        return index;
    }

    void push(int mask, const Voxel voxel) {
        mask &= ~_mask;
        if (mask == 0)
            return;
        _mask |= mask;

        int index = MSB(mask);

        _index = max(_index, index);
        _data[index] = voxel;
    }

    void pop(int mask) {
        if (mask == 0)
            return;

        _mask &= ~mask;
        _index = MSB(_mask);
    }
} cache;

[numthreads(8,8,1)]
void Fill(uint3 id : SV_DispatchThreadID) {
    int x = id.x;
    int y = id.y;
    if (x >= WIDTH || y >= HEIGHT)
        return;

    //cache._index = -1;
    //cache._mask = 0;

    int fill = 0;

    for (int z0 = 0; z0 < DEPTH; z0++) {
        VoxelMask mask = _outVoxelMasks[toIndex(x, y, z0)];

        fill |= mask.fill;
        fill &= ~mask.back;

        _outVoxelMasks[toIndex(x,y, z0)].fill |= fill;
    }
}

[numthreads(4,4,4)]
void Clear(uint3 id : SV_DispatchThreadID) {
    int x = id.x;
    int y = id.y;
    int z = id.z;
    if (x >= WIDTH || y >= HEIGHT || z >= DEPTH)
        return;

    int index = toIndex(x, y, z);
    _outVoxelMasks[index].back = 0;
    _outVoxelMasks[index].fill = 0;
    _outVoxels[index] = AIR;
}

#ifdef TRANSFORM_POSITIONS
    #define toLocal(v) mul(_matrix, float4((v) / float3(WIDTH, HEIGHT, DEPTH) * 2.0 - 1.0, 1.0)).xyz
#else
    #define toLocal(v) ((v) / float3(WIDTH, HEIGHT, DEPTH) * 2.0 - 1.0).xyz
#endif

//shared static const float3 dirX = float3(_matrix[0][0], _matrix[0][1], _matrix[0][2]);
//shared static const float3 dirY = float3(_matrix[1][0], _matrix[1][1], _matrix[1][2]);
//shared static const float3 dirZ = float3(_matrix[2][0], _matrix[2][1], _matrix[2][2]);
shared static const float3 dirX = float3(1.0, 0.0, 0.0);
shared static const float3 dirY = float3(0.0, 1.0, 0.0);
shared static const float3 dirZ = float3(0.0, 0.0, 1.0);

shared static const float3 OFFSET[] = {
    -dirX -dirY -dirZ,
    +dirX +dirY +dirZ,
    -dirX -dirY +dirZ,
    +dirX +dirY -dirZ,
    -dirX +dirY -dirZ,
    +dirX -dirY +dirZ,
    -dirX +dirY +dirZ,
    +dirX -dirY -dirZ,
};


[numthreads(4,4,4)]
void Render(uint3 id : SV_DispatchThreadID) {
    int x = id.x;
    int y = id.y;
    int z = id.z;
    if (x >= WIDTH || y >= HEIGHT || z >= DEPTH)
        return;

    int index = toIndex(x, y, z);
    VoxelMask voxel = _outVoxelMasks[index];

    float r = (log2(voxel.back) + 1) * 0.075;
    r = max(0, r);

    float g = (Cache::MSB(voxel.fill) + 1) * 0.1;
    g = clamp(g, 0.0, 1.0);

    float3 pos = toLocal(float3(x, y, z) + 0.5);
    float size = lerp(0.0, 0.0003, g);


    float3 col = float3(g, g * (1.0 - g) * 0.0, 1.0 - g);
    col.rb *= col.rb;
    col.g = r;

    for (int i = 0; i < 8; i++) {
        OutVertex vertex;
        vertex.pos = pos + OFFSET[i] * size;
        vertex.col = col;

        _outVertices[index * 8 + i] = vertex;
    }

}